name: Docker Image CI

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    
    env:
      ALIYUN_DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      ALIYUN_DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      ALIYUN_DOCKER_URL: ${{ secrets.DOCKER_LOGIN_URL }}
      SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
      SSH_USER: ${{ secrets.SERVER_USER_NAME }}
      SERVER_IP: ${{ secrets.SERVER_IP }}
      DOCKER_IMAGE_LATEST: ${ALIYUN_DOCKER_URL}/sarariman/demo:latest
      CONTAINER_NAME: demo-container
      BUILD_TIMESTAMP: ${{ github.run_number }} # 使用唯一的运行编号作为时间戳

    steps:
    - name: Check out the code
      uses: actions/checkout@v4

    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag my-image-name:${{ env.BUILD_TIMESTAMP }}

    - name: Log in to Aliyun Docker Registry
      run: |
        echo "${{ env.ALIYUN_DOCKER_PASSWORD }}" | docker login "${{ env.ALIYUN_DOCKER_URL }}" --username "${{ env.ALIYUN_DOCKER_USERNAME }}" --password-stdin

    - name: Tag Docker image with timestamp
      run: docker tag my-image-name:${{ env.BUILD_TIMESTAMP }} ${ALIYUN_DOCKER_URL}/sarariman/demo:${{ env.BUILD_TIMESTAMP }}

    - name: Push Docker image with timestamp to Aliyun registry
      run: docker push ${ALIYUN_DOCKER_URL}/sarariman/demo:${{ env.BUILD_TIMESTAMP }}

    - name: Tag Docker image as latest
      run: docker tag my-image-name:${{ env.BUILD_TIMESTAMP }} ${ALIYUN_DOCKER_URL}/sarariman/demo:latest

    - name: Push Docker image as latest to Aliyun registry
      run: docker push ${ALIYUN_DOCKER_URL}/sarariman/demo:latest

    - name: Deploy to Server via SSH
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SERVER_USER_NAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }} # 使用 SSH 私钥代替密码
        script: |
          # 登录到阿里云 Docker 注册表
          echo "${{ env.ALIYUN_DOCKER_PASSWORD }}" | sudo docker login --username "${{ env.ALIYUN_DOCKER_USERNAME }}" --password-stdin "${{ env.DOCKER_LOGIN_URL }}"
          
          # 停止并移除旧容器（如果存在）
          sudo docker ps -q -f "name=${{ env.CONTAINER_NAME }}" | xargs -r sudo docker stop
          sudo docker ps -aq -f "name=${{ env.CONTAINER_NAME }}" | xargs -r sudo docker rm
          
          # 移除特定仓库的未标记镜像
          sudo docker images --format "{{.ID}}" "${{ secrets.DOCKER_LOGIN_URL }}/sarariman/demo" | grep -v "$(sudo docker images --filter "reference=${{ secrets.DOCKER_LOGIN_URL }}/sarariman/demo:latest" --format "{{.ID}}")" | xargs -r sudo docker rmi -f
          
          # 拉取新的 Docker 镜像
          sudo docker pull "${{ env.DOCKER_IMAGE_LATEST }}"
          
          # 检查拉取是否成功
          if [ $? -ne 0 ]; then
            echo "Failed to pull Docker image"
            exit 1
          fi
          
          # 运行新的容器
          sudo docker run -d --name ${{ env.CONTAINER_NAME }} --restart unless-stopped -p 80:80 "${{ env.DOCKER_IMAGE_LATEST }}"
          
          # 确认容器正在运行
          sudo docker ps -f "name=${{ env.CONTAINER_NAME }}"
