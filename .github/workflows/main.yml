name: Docker Image CI

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    
    env:
      ALIYUN_DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      ALIYUN_DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      ALIYUN_DOCKER_URL: ${{ secrets.DOCKER_LOGIN_URL }}
      SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
      SSH_USER: ${{ secrets.SERVER_USER_NAME }}
      SERVER_IP: ${{ secrets.SERVER_IP }}
      DOCKER_IMAGE_LATEST: ${ALIYUN_DOCKER_URL}/sarariman/demo:latest
      CONTAINER_NAME: demo-container
      BUILD_TIMESTAMP: ${{ github.run_number }} # 使用唯一的运行编号作为时间戳

    steps:
    - name: Check out the code
      uses: actions/checkout@v4

    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag my-image-name:${{ env.BUILD_TIMESTAMP }}

    - name: Log in to Aliyun Docker Registry
      run: |
        echo "${{ env.ALIYUN_DOCKER_PASSWORD }}" | docker login "${{ env.ALIYUN_DOCKER_URL }}" --username "${{ env.ALIYUN_DOCKER_USERNAME }}" --password-stdin

    - name: Tag Docker image with timestamp
      run: docker tag my-image-name:${{ env.BUILD_TIMESTAMP }} ${ALIYUN_DOCKER_URL}/sarariman/demo:${{ env.BUILD_TIMESTAMP }}

    - name: Push Docker image with timestamp to Aliyun registry
      run: docker push ${ALIYUN_DOCKER_URL}/sarariman/demo:${{ env.BUILD_TIMESTAMP }}

    - name: Tag Docker image as latest
      run: docker tag my-image-name:${{ env.BUILD_TIMESTAMP }} ${ALIYUN_DOCKER_URL}/sarariman/demo:latest

    - name: Push Docker image as latest to Aliyun registry
      run: docker push ${ALIYUN_DOCKER_URL}/sarariman/demo:latest

    - name: Deploy to Server via SSH
      run: |
        sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${SSH_USER}@${SERVER_IP} << EOF
          # Export environment variables for use within the SSH session
          export ALIYUN_DOCKER_URL=${{ env.ALIYUN_DOCKER_URL }}
          export ALIYUN_DOCKER_USERNAME=${{ env.ALIYUN_DOCKER_USERNAME }}
          export ALIYUN_DOCKER_PASSWORD=${{ env.ALIYUN_DOCKER_PASSWORD }}
          export DOCKER_IMAGE_LATEST=${{ env.DOCKER_IMAGE_LATEST }}
          export CONTAINER_NAME=${{ env.CONTAINER_NAME }}

          # Log in to Aliyun Docker Registry on the remote server
          echo "\$ALIYUN_DOCKER_PASSWORD" | sudo docker login --username "\$ALIYUN_DOCKER_USERNAME" --password-stdin "\$ALIYUN_DOCKER_URL"
          
          # Stop and remove old container if exists
          sudo docker ps -q -f "name=\$CONTAINER_NAME" | xargs -r sudo docker stop
          sudo docker ps -aq -f "name=\$CONTAINER_NAME" | xargs -r sudo docker rm

          # Remove old images related to this container (if any)
          sudo docker images --format "{{.Repository}}:{{.Tag}}" | grep 'sarariman/demo' | grep -v 'latest' | xargs -r sudo docker rmi -f
          
          # Pull the new Docker image from Aliyun
          sudo docker pull \$DOCKER_IMAGE_LATEST
          
          # Check if the pull was successful
          if [ $? -ne 0 ]; then
            echo "Failed to pull Docker image"
            exit 1
          fi
          
          # Run the new container
          sudo docker run -d --name \$CONTAINER_NAME --restart unless-stopped -p 80:80 \$DOCKER_IMAGE_LATEST
          
          # Confirm the container is running
          sudo docker ps -f "name=\$CONTAINER_NAME"
        EOF
