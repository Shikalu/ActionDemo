name: Docker Image CI

on:
  workflow_dispatch:
  
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    
    steps:
    - name: Check out the code
      uses: actions/checkout@v4

    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag my-image-name:$(date +%s)

    - name: Log in to Aliyun Docker Registry
      env:
        ALIYUN_DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
        ALIYUN_DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
        ALIYUN_DOCKER_URL: ${{secrets.DOCKER_LOGIN_URL}}
      run: |
        echo "${ALIYUN_DOCKER_PASSWORD}" | docker login "${ALIYUN_DOCKER_URL}" --username "${ALIYUN_DOCKER_USERNAME}" --password-stdin

    # Remove this step if you don't need to remove old images before building a new one.
    - name: Remove old Docker images (Optional)
      run: |
        docker images --format '{{.Repository}}:{{.Tag}}' | grep 'registry.cn-hangzhou.aliyuncs.com/sarariman/demo' | xargs -r docker rmi -f {}

    - name: Tag Docker image
      env:
        ALIYUN_DOCKER_URL: ${{secrets.DOCKER_LOGIN_URL}}
      run: docker tag my-image-name:$(date +%s) ${ALIYUN_DOCKER_URL}/sarariman/demo:latest

    - name: Push Docker image to Aliyun registry
      env:
        ALIYUN_DOCKER_URL: ${{secrets.DOCKER_LOGIN_URL}}
      run: docker push ${ALIYUN_DOCKER_URL}/sarariman/demo:latest

    - name: Deploy to Server via SSH
      env:
        SSH_PASSWORD: ${{secrets.SSH_PASSWORD}}
        SSH_USER: ${{secrets.SERVER_USER_NAME}}
        SERVER_IP: ${{secrets.SERVER_IP}}
        DOCKER_IMAGE: ${ALIYUN_DOCKER_URL}/sarariman/demo:latest
        CONTAINER_NAME: demo-container
      run: |
        sudo apt-get update && sudo apt-get install -y sshpass
        sshpass -p "${SSH_PASSWORD}" ssh -o StrictHostKeyChecking=no ${SSH_USER}@${SERVER_IP} << 'EOF'
          # Stop and remove old container
          sudo docker ps -q -f "name=${CONTAINER_NAME}" | xargs -r sudo docker stop
          sudo docker ps -aq -f "name=${CONTAINER_NAME}" | xargs -r sudo docker rm

          # Pull the new Docker image
          sudo docker pull ${DOCKER_IMAGE}

          # Run the new container
          sudo docker run -d --name ${CONTAINER_NAME} --restart unless-stopped -p 80:80 ${DOCKER_IMAGE}
        EOF
